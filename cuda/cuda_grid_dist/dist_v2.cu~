#include <math.h> //Include standard math library containing sqrt.
#include <chrono>
#include <iostream>
#include <stdio.h>
#include <sstream>
using namespace std::chrono;

// Convenience function to format human friendly elapsed time
#include <iomanip>
#include <optional>
#include <ostream>
using namespace std;

#define N 64
#define TPB 32
__device__ float scale(int i, int n)
{
	return ((float)i)/(n - 1);
}
__device__ float distance(float x1, float x2)
{
	return sqrt((x2 - x1)*(x2 - x1));
}
__global__ void distanceKernel(float *d_out, float ref, int len)
{
	const int i = blockIdx.x*blockDim.x + threadIdx.x;
	const float x = scale(i, len);
	d_out[i] = distance(x, ref);
	printf("i = %2d: dist from %f to %f is %f.\n", i, ref, x, d_out[i]);
}

// main function
int main( int argc, char* argv[])
{
  int N = atoi(argv[1]);

  // Choose a reference value from which distances are measured.
  const float ref = 0.5;

  //auto t1 = high_resolution_clock::now();
  //for (int i = 0; i < N; ++i)
  //  {
  //    float x = scale(i, N);
  //    out[i] = distance(x, ref);
  //  }

  // Create the array to store data
  float* device_out = NULL;
  // Allocate the array on the GPU
  cudaMalloc(&device_out, N*sizeof(float));

  // Replace the for loop with a CUDA block of computational threads
  int threads_per_block = 32;

distanceKernel<<<N/threads_per_block, threads_per_block>>>(device_out, ref, N);

  cudaError_t err = cudaDeviceSynchronize();
  cout << "GPU computation reports " << cudaGetErrorString(err) << "." << endl;

  float* host_out = (float*) malloc(N*sizeof(float));
  cudaMemcpy(host_out, device_out, N*sizeof(float), cudaMemcpyDeviceToHost);

  //auto t2 = high_resolution_clock::now();

  /* Getting number of milliseconds as an integer. */
  //auto duration_ms = duration_cast<milliseconds>(t2 - t1);


  cout.precision(3);

 // cout << "Calcuated " << float(N) <<  " Distances in Time: " << format( duration_ms ) << endl;
  cout << "First distance: " << host_out[0] << endl;
  cout << "Second distance: " << host_out[1] << endl;
cout << "Last distance: " << host_out[N-1] << endl;

  cudaFree(device_out);
  free(host_out);

  return 0;
}


//int main()
//{
//	const float ref = 0.5f;
//	// Declare a pointer for an array of floats
//	float *d_out = 0;
//	// Allocate device memory to store the output array
//	cudaMalloc(&d_out, N*sizeof(float));
//	// Launch kernel to compute and store distance values
//	distanceKernel<<<N/TPB, TPB>>>(d_out, ref, N);
//
//	float* host_out = (float*) malloc(N*sizeof(float));	
//  	cudaMemcpy(host_out, d_out, N*sizeof(float), cudaMemcpyDeviceToHost);
//
//	std::cout << host_out[N-1] << std::endl;
//
//	cudaFree(d_out); // Free the memory
//	return 0;
//}